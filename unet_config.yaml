device: cuda
seed: 100000
dataset_repo_id: lerobot/pusht
video_backend: pyav
training:
  image_transforms:
  # These transforms are all using standard torchvision.transforms.v2
  # You can find out how these transformations affect images here:
  # https://pytorch.org/vision/0.18/auto_examples/transforms/plot_transforms_illustrations.html
  # We use a custom RandomSubsetApply container to sample them.
  # For each transform, the following parameters are available:
  #   weight: This represents the multinomial probability (with no replacement)
  #           used for sampling the transform. If the sum of the weights is not 1,
  #           they will be normalized.
  #   min_max: Lower & upper bound respectively used for sampling the transform's parameter
  #           (following uniform distribution) when it's applied.
    # Set this flag to `true` to enable transforms during training
    enable: false
    # This is the maximum number of transforms (sampled from these below) that will be applied to each frame.
    # It's an integer in the interval [1, number of available transforms].
    max_num_transforms: 3
    # By default, transforms are applied in Torchvision's suggested order (shown below).
    # Set this to True to apply them in a random order.
    random_order: false
    brightness:
      weight: 1
      min_max: [0.8, 1.2]
    contrast:
      weight: 1
      min_max: [0.8, 1.2]
    saturation:
      weight: 1
      min_max: [0.5, 1.5]
    hue:
      weight: 1
      min_max: [-0.05, 0.05]
    sharpness:
      weight: 1
      min_max: [0.8, 1.2]
  offline_steps: 200000
  online_steps: 0
  online_steps_between_rollouts: 1
  online_sampling_ratio: 0.5
  online_env_seed: ???
  eval_freq: 5000
  save_freq: 5000
  log_freq: 250
  save_model: true
  batch_size: 64
  grad_clip_norm: 10
  lr: 0.0001
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas:
  - 0.95
  - 0.999
  adam_eps: 1.0e-08
  adam_weight_decay: 1.0e-06
  delta_timestamps:
    observation.image:
    - -0.1
    - 0.0
    observation.state:
    - -0.1
    - 0.0
    action:
    - -0.1
    - 0.0
    - 0.1
    - 0.2
    - 0.3
    - 0.4
    - 0.5
    - 0.6
    - 0.7
    - 0.8
    - 0.9
    - 1.0
    - 1.1
    - 1.2
    - 1.3
    - 1.4
eval:
  n_episodes: 50
  batch_size: 50
  use_async_envs: false
wandb:
  enable: true
  disable_artifact: false
  project: lerobot
  notes: ''
fps: 10
env:
  name: pusht
  task: PushT-v0
  from_pixels: true
  pixels_only: false
  image_size: 96
  episode_length: 300
  fps: ${fps}
  state_dim: 2
  action_dim: 2
override_dataset_stats:
  observation.image:
    mean:
    - - - 0.5
    - - - 0.5
    - - - 0.5
    std:
    - - - 0.5
    - - - 0.5
    - - - 0.5
  observation.state:
    min:
    - 13.456424
    - 32.938293
    max:
    - 496.14618
    - 510.9579
  action:
    min:
    - 12.0
    - 25.0
    max:
    - 511.0
    - 511.0
policy:
  name: diffusion
  n_obs_steps: 2
  horizon: 16
  n_action_steps: 8
  input_shapes:
    observation.image:
    - 3
    - 96
    - 96
    observation.state:
    - ${env.state_dim}
  output_shapes:
    action:
    - ${env.action_dim}
  input_normalization_modes:
    observation.image: mean_std
    observation.state: min_max
  output_normalization_modes:
    action: min_max
  vision_backbone: resnet18
  crop_shape:
  - 84
  - 84
  crop_is_random: true
  pretrained_backbone_weights: null
  use_group_norm: true
  spatial_softmax_num_keypoints: 32
  down_dims:
  - 512
  - 1024
  - 2048
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: true
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon
  clip_sample: true
  clip_sample_range: 1.0
  num_inference_steps: 100
